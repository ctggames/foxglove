//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2021.03.25 at 03:40:09 PM NZDT
//


package nz.co.ctg.jmsfx.svg.shape;

import java.util.List;
import java.util.stream.Stream;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import com.google.common.base.MoreObjects.ToStringHelper;

import nz.co.ctg.jmsfx.svg.adapter.PointListAdapter;

import javafx.geometry.Point2D;
import javafx.scene.shape.Polyline;


/**
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "polyline")
@XmlRootElement(name = "polyline")
public class FXVGPolyline extends AbstractFXVGShape implements FXVGShape<Polyline> {

    @XmlAttribute(name = "points", required = true)
    @XmlJavaTypeAdapter(PointListAdapter.class)
    protected List<Point2D> points;

    @Override
    public Polyline createShape() {
        parseStyle();
        Polyline polyline = new Polyline(getPointList());
        setColors(polyline);
        setStrokeProperties(polyline);
        setTransforms(polyline);
        return polyline;
    }

    /**
     * Gets the value of the points property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    public List<Point2D> getPoints() {
        return points;
    }

    /**
     * Sets the value of the points property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setPoints(List<Point2D> value) {
        this.points = value;
    }

    @Override
    protected void toStringDetail(ToStringHelper builder) {
        super.toStringDetail(builder);
        builder.add("points", points);
    }

    private double[] getPointList() {
        return points.stream().flatMap(pt -> Stream.of(pt.getX(), pt.getY())).mapToDouble(Double::doubleValue).toArray();
    }

}
